set-option -ga terminal-overrides ",*256col*:Tc" # 这句是关键

# tmux的快捷键、cheatsheet https://gist.github.com/MohamedAlaa/2961058
# tmux使用手册 http://louiszhai.github.io/2017/09/30/tmux/
set -g @plugin 'tmux-plugins/tpm'
# 快捷键
# prefix + I 安装所有的插件
# prefix + U 更新所有的插件
# prefix + alt + U 删除所有未注册的插件的文件

set -g @plugin 'jaclu/tmux-menus'
set -g @menus_trigger 'F9'
set -g @menus_without_prefix 1
# 与鼠标手势冲突
# unbind-key -n MouseDown3Pane
# unbind-key -n MouseDown3Status
# unbind-key -n MouseDown3StatusLeft
#不喜欢这些东西
unbind-key <
unbind-key >
set -g @menus_location_x 'R'
set -g @menus_location_y 'S'

set -g @plugin 'tmux-plugins/tmux-sensible'
# prefix + ctrl p 上一个window
# prefix + ctrl n 下一个window
# prefix + a 上次访问的window
# prefix + z zoom、unzoom当前的pane
# preifx + R 载入 ~/.tmux.conf

set -g @plugin 'tmux-plugins/tmux-pain-control'
# prefix [ctrl] h/j/k/l
# prefix shift h/j/k/l 调整大小
# prefix |/\/-/_ 分割窗口 都打开当前的路径
# prefix </> 移动window往左/往右一个

# set -g @plugin 'lljbash/tmux-update-display'

# 需要安装libtmux，有点麻烦，不开启了
# python3 -m pip install libtmux --user
# set -g @plugin 'ofirgall/tmux-window-name'

# 给stuatus bar 添加颜色，每个session不一样颜色
set -g @plugin 'imomaliev/tmux-peacock'


# set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
# 在status bar上展示prefix-highlight （以及日期），默认只展示 prefix 键
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
# 展示 copy mode 以及 sync mode
set -g @prefix_highlight_show_copy_mode 'on'
# tmux set-option -g synchronize-panes on 来开启同一个window的不同pane 同步输入
set -g @prefix_highlight_show_sync_mode 'on'

# https://github.com/MunifTanjim/tmux-mode-indicator
# This is a trimmed down version of the original tmux-prefix-highlight plugin.
set -g @plugin 'MunifTanjim/tmux-mode-indicator'
set -g status-right '%Y-%m-%d %H:%M #{tmux_mode_indicator}'


# https://github.com/MunifTanjim/tmux-suspend
# set -g @plugin 'MunifTanjim/tmux-suspend'
# 对于nested tmux session 有用，但是目前还不知道如何使用

# 有关于拷贝屏幕上的文字的功能

# You can fuzzy find your text instead of selecting it by hand:
# https://github.com/laktak/extrakto
# 依赖 fzf tmux3.2 python3.6+ bash
set -g @plugin 'laktak/extrakto'
set -g @extrakto_filter_order "word all line email hash"
# prefix + tab to start extrakto
# fuzzy find the text/path/url/line
# use custom filters (ctrl + f)
# press
# tab to insert it to the current pane,
# shift tab to multi selected
# enter to copy it to the clipboard
# 继续 ctrl + f 可以在word all lines 中选择搜索的方式
# word 就是分成单词之后（空格分割），搜索与选择
# all 不知道具体是啥，但是能够分割成 引号引住的 url 路径 等等，可以自定义filter
# lines 可能就是最普通的搜索
# ctrl + g 去调整搜索的范围
# ctrl + o 将所选内容传递给系统的 `open`
# ctrl + e 将所选内容传递给EDITOR，应该只有路径传给 EDITOR 是有意义的
# see other features in HELP (press ctrl-h in extrakto)
# 通过 ~/.config/extrakto/extrakto.conf 来增加更多的匹配模式

# Copy to the system clipboard in tmux.
set -g @plugin 'tmux-plugins/tmux-yank'
# 一些系统需要安装其他剪贴板软件支持，但是wsl不需要
# https://github.com/tmux-plugins/tmux-yank
# prefix–y — copies text from the command line to the clipboard.
# prefix–Y — copy the current pane's current working directory to the clipboard.
# y — copy selection to system clipboard.
# Y (shift-y) — "put" selection. Equivalent to copying a selection, and pasting it to the command line.
# 这个 shift-y 似乎还是不能用
set -g @yank_pane_pwd 'Y'

# This tmux plugin is intended to allow copying on-screen data as efficiently and in as few keystrokes as possible.
# 最有用的感觉是 copy 模式下的s功能
set -g @plugin 'CrispyConductor/tmux-copy-toolkit'
# easymotion 在copy模式下，按下s，跳转到想要的地方
# easycopy prefix + S 直接进入此模式，按下想要的开头字母，选择之后，按下想要的结尾字母，直接选中这段文字
# quickcopy prefix + Q 选择一些常用的模式字符串
# P quickopen  使用xdg-open打开所选，我觉着这个是最没有用的了
# W linecopy
# 增加新的regrex匹配模式
# set -g @copytk-quickcopy-match-0-1 '(SELECT|INSERT) .+;'
# set -g @copytk-quickcopy-match-0-10 '\b([0-9a-f]{7,40}|[a-z]{52}|[0-9a-f]{64})\b'

# https://github.com/tmux-plugins/tmux-copycat
# 匹配模式比较多，但是增加了许多快捷键，十分不方便使用，建议直接将此处的正则表达式转移到extrakto中
# set -g @plugin 'tmux-plugins/tmux-copycat'
# This plugin enables:
# regex searches (native support added in tmux 3.1)
# search result highlighting
# predefined searches
# prefix + / - regex search (strings work too)
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search


# set -g @plugin 'Morantron/tmux-fingers'
# set -g @fingers-key G
# prefix + G 会直接 高亮常用的模式，
# 然后选择后根据 不按键、按住ctrl键、按住shift键、按住alt键 来执行特定的工作

# 依赖于ruby，只有一个设置键 prefix + j 来实现easymotion模式，但是也就是这样了
# set -g @plugin 'schasse/tmux-jump'
# set -g @jump-key G


# set -g @plugin 'abhinav/tmux-fastcopy'
# 使用go写的，安装的时候有点难受


set -g @plugin 'whame/tmux-modal'
# w l 选择右边的pane
# w 1 选择编号为1的window
# w c 创建窗口
# w D 删除关闭window
# w H 选择左侧的window
# w o 选择刚刚访问的window
# w b Break pane into a new window.
# w n Display pane numbers.
# w , Rename window.
# w m k Move window pane up. swap-pane -U
# w m j Move window pane down. swap-pane -D
# w L 选择右侧的window
# w s l 右侧分裂pane
# w d 删除关闭pane
# w z zoom in/out pane
# w w 开启 sticky window command
# w r 开启 sticky resize window command
# w t choose tree
# w i 根据index选择window
# w a 1/2/3/4 1even-horizontal 2even-vertical 3main-horizontal 4main-vertical
# y 粘贴
# c 进入 copy mode
# q 离开 sticky mode
# s d/h/l/t d is Detach; h is previous session; l is next session; t is select session with tree view



# Restore tmux environment after system restart.
# https://github.com/tmux-plugins/tmux-resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
# 默认是：vi vim nvim emacs man less more tail top htop irssi weechat mutt
# set -g @resurrect-processes 'vi vim nvim emacs man less more tail top htop irssi weechat mutt'
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore
# 将pane的显示内容也一并找回来
set -g @resurrect-capture-pane-contents 'on'
# for vim
# set -g @resurrect-strategy-vim 'session'
# for neovim
# set -g @resurrect-strategy-nvim 'session'
# 自动保存，不需要自己手动 prefix ctrl s 了
# set -g @plugin 'tmux-plugins/tmux-continuum'

# 手动保存特定名称的snapshot
# set -g @plugin 'spywhere/tmux-named-snapshot'
# set -g @named-snapshot-save "C-m:manual"
# set -g @named-snapshot-restore "C-M:manual"


#
# set -g @plugin 'sainnhe/tmux-fzf'
# To launch tmux-fzf, press prefix + F (Shift+F).

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# 增强session的功能
# set -g @plugin 'tmux-plugins/tmux-sessionist'

set-option -g mouse on
set-option -g base-index 1

# 将prefix键设置成 C-a
set-option -g prefix C-a
# 将 prefix 表中的 c-b 的映射取消掉
unbind -T prefix C-b
bind-key -T prefix C-a send-prefix

# prefix s/w/= 快速从tree中选择 session window pane


# bind-key -T prefix | split-window -h -c "#{pane_current_path}"
# bind-key -T prefix - split-window -v -c "#{pane_current_path}"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind-key -n M-=  if-shell "$is_vim" "send-keys M-=" "select-pane -l"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
